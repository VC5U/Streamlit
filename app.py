import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="An√°lisis con NumPy y Pandas", layout="wide")

# ------------------------------
# ENCABEZADO PRINCIPAL
# ------------------------------
st.title("üìä Aplicaci√≥n Interactiva: NumPy, Pandas y Streamlit")
st.subheader("Realizado por: *Adriana Valentina Cornejo Ulloa*")
st.markdown("---")
st.write("Esta aplicaci√≥n permite realizar an√°lisis num√©rico y estad√≠stico con **Python**, "
         "utilizando las librer√≠as **NumPy**, **Pandas** y **Matplotlib** dentro de un entorno **Streamlit** interactivo.")

# ------------------------------
# CREACI√ìN DE TABS
# ------------------------------
tabs = st.tabs([
    "üìà Ejercicio 1",
    "üé≤ Ejercicio 2",
    "üìä Ejercicio 3",
    "‚öôÔ∏è Ejercicio 4",
    "üß© Ejercicios Pandas",
    "üìö DataFrame de Estudiantes"
])

# ------------------------------
# EJERCICIO 1
# ------------------------------
with tabs[0]:
    st.header("üìà C√°lculos Estad√≠sticos con NumPy")
    array = np.arange(1, 101)
    media = np.mean(array)
    mediana = np.median(array)
    varianza = np.var(array)
    percentil_90 = np.percentile(array, 90)

    col1, col2 = st.columns(2)
    with col1:
        st.write("**Array generado (1 al 100):**")
        st.code(array, language="python")

    with col2:
        st.metric("Media", f"{media:.2f}")
        st.metric("Mediana", f"{mediana:.2f}")
        st.metric("Varianza", f"{varianza:.2f}")
        st.metric("Percentil 90", f"{percentil_90:.2f}")

# ------------------------------
# EJERCICIO 2
# ------------------------------
with tabs[1]:
    st.header("üé≤ Matriz Aleatoria 5x5")
    matriz = np.random.randn(5, 5)
    determinante = np.linalg.det(matriz)
    traza = np.trace(matriz)

    st.write("**Matriz generada aleatoriamente:**")
    st.dataframe(matriz)

    col1, col2 = st.columns(2)
    col1.metric("Determinante", f"{determinante:.4f}")
    col2.metric("Traza", f"{traza:.4f}")

# ------------------------------
# EJERCICIO 3
# ------------------------------
with tabs[2]:
    st.header("üìä Distribuci√≥n de Frecuencias")
    datos = np.random.randint(0, 11, 1000)
    valores, frecuencias = np.unique(datos, return_counts=True)
    tabla = pd.DataFrame({"Valor": valores, "Frecuencia": frecuencias})
    
    st.write("**Tabla de frecuencias:**")
    st.dataframe(tabla)

    fig, ax = plt.subplots()
    ax.bar(valores, frecuencias)
    ax.set_xlabel("Valor")
    ax.set_ylabel("Frecuencia")
    ax.set_title("Distribuci√≥n de n√∫meros aleatorios entre 0 y 10")
    st.pyplot(fig)

# ------------------------------
# EJERCICIO 4
# ------------------------------
with tabs[3]:
    st.header("‚öôÔ∏è Normalizaci√≥n de un Vector")

    modo = st.radio("Selecciona c√≥mo generar el vector:", ("Manual", "Aleatorio"), horizontal=True)

    if modo == "Manual":
        vector_str = st.text_input("Ingresa los valores separados por comas:", "10, 20, 30, 40")
        try:
            v = np.array([float(x.strip()) for x in vector_str.split(",")])
        except:
            st.error("Por favor ingresa solo n√∫meros separados por comas.")
            v = np.array([])
    else:
        tama√±o = st.slider("Tama√±o del vector aleatorio:", 3, 10, 5)
        v = np.random.randint(1, 100, tama√±o)

    if v.size > 0:
        media_v = np.mean(v)
        desv_v = np.std(v)
        v_norm = (v - media_v) / desv_v

        col1, col2 = st.columns(2)
        col1.write(f"**Vector original:** {v}")
        col2.write(f"**Vector normalizado:** {np.round(v_norm, 2)}")

# ------------------------------
# üìö DATAFRAME DE ESTUDIANTES
# ------------------------------
with tabs[5]:
    st.header("üìö Tabla Interactiva de Estudiantes")
    st.write("Visualiza, filtra y descarga la informaci√≥n real de los estudiantes.")

    estudiantes_data = {
        "Nombre": [
            "Jhony","Ismael","Maura","Stalyn","Erick","Edwin","Adriana","Wendy",
            "Gilson","Kenny","Anthony","David","Carmen","Freddy","Jhon","Andrea"
        ],
        "Apellido": [
            "Mendez", "Loja", "Calle", "Pesantes", "Chacon", "Choez", "Cornejo", "Llivichuzhca",
            "Tenemea", "Valdivieso", "Fajardo", "Lopez", "Neira", "Gomez", "Montenegro", "Calle"
        ],
        "Celular": [
            "0998765432", "0987654321", "0976543210", "0965432109", "0954321098",
            "0943210987", "0932109876", "0921098765", "0910987654", "0955566778",
            "0988776655", "0977665544", "0966554433", "0955443322", "0944332211", "0933221100"
        ],
        "Edad": [
            20, 21, 19, 22, 20, 21, 23, 22,
            24, 20, 21, 23, 22, 21, 20, 22
        ],
        "Curso": [
            "Primer ciclo", "Segundo ciclo", "Tercer ciclo", "Cuarto ciclo", "Quinto ciclo",
            "Sexto ciclo", "Primer ciclo", "Segundo ciclo", "Tercer ciclo", "Cuarto ciclo",
            "Quinto ciclo", "Sexto ciclo", "Primer ciclo", "Segundo ciclo", "Tercer ciclo", "Cuarto ciclo"
        ],
        "Nota": [
            85, 90, 78, 88, 92, 76, 95, 80,
            84, 89, 91, 77, 82, 86, 79, 94
        ],
        "Asignatura": [
            "POO", "Base de datos", "Inteligencia artificial", "Metodolog√≠a",
            "Formulaci√≥n de proyectos", "Redes", "Ingl√©s", "Kichwa",
            "App m√≥vil", "Aplicaciones seguras", "Aplicaciones en la nube", "√âtica",
            "Diversidad", "Tendencias actuales", "Legislaci√≥n", "Emprendimiento"
        ]
    }

    df_estudiantes = pd.DataFrame(estudiantes_data)

    # --- FILTROS ---
    st.sidebar.header("üîç Filtros de b√∫squeda")
    curso_sel = st.sidebar.multiselect("Selecciona el ciclo:", sorted(df_estudiantes["Curso"].unique()))
    materia_sel = st.sidebar.multiselect("Selecciona la asignatura:", sorted(df_estudiantes["Asignatura"].unique()))

    df_filtrado = df_estudiantes.copy()
    if curso_sel:
        df_filtrado = df_filtrado[df_filtrado["Curso"].isin(curso_sel)]
    if materia_sel:
        df_filtrado = df_filtrado[df_filtrado["Asignatura"].isin(materia_sel)]

    st.write("### üìã Datos de los estudiantes filtrados:")
    st.dataframe(df_filtrado, use_container_width=True)

    # --- DESCARGA ---
    csv = df_filtrado.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="‚¨áÔ∏è Descargar CSV filtrado",
        data=csv,
        file_name="estudiantes_filtrados.csv",
        mime="text/csv"
    )

# ------------------------------
# üß© EJERCICIOS DE PANDAS
# ------------------------------
with tabs[4]:
    st.header("üß© Ejercicios (Pandas)")

    st.markdown("""
    1Ô∏è‚É£ **Carga un CSV propio** (o exporta un DataFrame existente) y muestra sus primeras 10 filas.  
    2Ô∏è‚É£ Calcula la **venta total por producto** y ord√©nala de mayor a menor.  
    3Ô∏è‚É£ Identifica **valores faltantes** y aplica una estrategia de imputaci√≥n.  
    4Ô∏è‚É£ Construye una **tabla din√°mica (pivot_table)** de ventas por mes y producto.  
    5Ô∏è‚É£ Realiza un **merge** entre dos DataFrames (`productos` y `ventas`).
    """)

    st.markdown("---")

    st.subheader("üìÇ 1. Cargar CSV o usar DataFrame de ejemplo")
    archivo = st.file_uploader("Sube tu archivo CSV", type=["csv"])
    if archivo:
        df = pd.read_csv(archivo)
    else:
        df = pd.DataFrame({
            "Producto": ["A", "B", "C", "A", "B", "C"],
            "Mes": ["Enero", "Enero", "Enero", "Febrero", "Febrero", "Febrero"],
            "Ventas": [100, 150, 200, 130, 120, 210],
            "Precio": [10, 15, 20, 10, 15, 20]
        })
        st.info("üìÑ No se carg√≥ un archivo, se usa un DataFrame de ejemplo.")

    st.dataframe(df.head(10))

    # 2Ô∏è‚É£ Venta total por producto
    st.subheader("üí∞ 2. Venta total por producto")
    total_producto = df.groupby("Producto")["Ventas"].sum().sort_values(ascending=False)
    st.dataframe(total_producto)

    # 3Ô∏è‚É£ Valores faltantes
    st.subheader("üßÆ 3. Detecci√≥n e imputaci√≥n de valores faltantes")
    st.write("Valores faltantes por columna:")
    st.write(df.isna().sum())

    if df.isna().any().any():
        metodo = st.selectbox("M√©todo de imputaci√≥n:", ["Media", "Mediana", "Moda"])
        if metodo == "Media":
            df = df.fillna(df.mean(numeric_only=True))
        elif metodo == "Mediana":
            df = df.fillna(df.median(numeric_only=True))
        else:
            df = df.fillna(df.mode().iloc[0])
        st.success("‚úÖ Imputaci√≥n completada.")
        st.dataframe(df)

    # 4Ô∏è‚É£ Pivot Table
    st.subheader("üìä 4. Tabla din√°mica (ventas por mes y producto)")
    try:
        pivot = pd.pivot_table(df, values="Ventas", index="Mes", columns="Producto", aggfunc="sum")
        st.dataframe(pivot)
    except Exception as e:
        st.warning("‚ö†Ô∏è No se pudo generar la tabla din√°mica. Verifica las columnas 'Mes', 'Producto' y 'Ventas'.")

    # 5Ô∏è‚É£ Merge entre DataFrames
    st.subheader("üîó 5. Merge entre dos DataFrames")
    productos = pd.DataFrame({
        "Producto": ["A", "B", "C"],
        "Categoria": ["Electr√≥nica", "Ropa", "Juguetes"]
    })
    ventas = df[["Producto", "Ventas", "Mes"]]
    merge_df = pd.merge(ventas, productos, on="Producto", how="left")
    st.dataframe(merge_df)



st.markdown("---")
st.caption("üí° Desarrollado con Streamlit | NumPy | Pandas | Matplotlib")
